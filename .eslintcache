[{"/home/taleiko/Documents/Fullstack 2021/part5/src/index.js":"1","/home/taleiko/Documents/Fullstack 2021/part5/src/App.js":"2","/home/taleiko/Documents/Fullstack 2021/part5/src/components/Blog.js":"3","/home/taleiko/Documents/Fullstack 2021/part5/src/services/blogs.js":"4","/home/taleiko/Documents/Fullstack 2021/part5/src/services/login.js":"5","/home/taleiko/Documents/Fullstack 2021/part5/src/components/BlogForm.js":"6","/home/taleiko/Documents/Fullstack 2021/part5/src/components/Togglable.js":"7"},{"size":162,"mtime":1617713542460,"results":"8","hashOfConfig":"9"},{"size":3944,"mtime":1617788775096,"results":"10","hashOfConfig":"9"},{"size":515,"mtime":1617789235914,"results":"11","hashOfConfig":"9"},{"size":482,"mtime":1617706285481,"results":"12","hashOfConfig":"9"},{"size":201,"mtime":1617703535672,"results":"13","hashOfConfig":"9"},{"size":1264,"mtime":1617789145932,"results":"14","hashOfConfig":"9"},{"size":626,"mtime":1617718833937,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"19hchub",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/taleiko/Documents/Fullstack 2021/part5/src/index.js",[],["34","35"],"/home/taleiko/Documents/Fullstack 2021/part5/src/App.js",["36","37"],"import React, { useState, useEffect } from 'react'\nimport Blog from './components/Blog'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\nimport BlogForm from './components/BlogForm'\nimport Togglable from './components/Togglable'\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [blogFormVisible, setBlogFormVisible] = useState(false)\n\n  useEffect(() => {\n    blogService.getAll().then(blogs =>\n      setBlogs( blogs )\n    )  \n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n      window.localStorage.setItem(\n        'loggedBlogappUser', JSON.stringify(user)\n      )\n      blogService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('wrong username or password')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const handleLogout = async (event) => {\n    event.preventDefault()\n    try {\n      window.localStorage.removeItem(\n        'loggedBlogappUser'\n      )\n      setUser(null)\n    } catch (exception) {\n      setErrorMessage('Already logged out')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const addBlog = (blogObject) => {\n    blogService\n      .create(blogObject)\n      .then(returnedBlog => {\n        setBlogs(blogs.concat(returnedBlog))\n      })\n    setSuccessMessage(\n      `a new blog ${blogObject.title} by ${blogObject.author} added`\n    )\n    setTimeout(() => {\n      setSuccessMessage(null)\n    }, 5000)\n  }\n\n  const loginForm = () => {\n    return (\n      <div>\n        <h2>Log in to application</h2>\n        <form onSubmit={handleLogin}>\n          <div>\n            username\n            <input\n            type=\"text\"\n            value={username}\n            name=\"Username\"\n            onChange={({ target }) => setUsername(target.value)}\n            />\n            </div>\n            <div>\n              password\n              <input\n              type=\"password\"\n              value={password}\n              name=\"Password\"\n              onChange={({ target }) => setPassword(target.value)}\n              />\n            </div>\n          <button type=\"submit\">login</button>\n        </form>\n      </div>\n    )\n  }\n\n  const blogForm = () => {\n    return (\n      <div>\n        <h2>blogs</h2>\n        <p>\n          {user.name} logged in\n          <button type=\"submit\" onClick={handleLogout}>logout</button>\n        </p>\n        <Togglable buttonLabel=\"new blog\">\n          <BlogForm\n            createBlog={addBlog}\n            user = {user}\n          />\n        </Togglable>\n        {blogs.map(blog =>\n          <Blog key={blog.id} blog={blog} />\n        )}\n      </div>\n    )\n  }\n\n  const ErrorNotification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  const SuccessNotification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"success\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n    <ErrorNotification message={errorMessage} />\n    <SuccessNotification message={successMessage} />\n\n    {user === null && loginForm()}\n    {user !== null && blogForm()}\n    </div>\n  )\n}\n\nexport default App","/home/taleiko/Documents/Fullstack 2021/part5/src/components/Blog.js",["38","39","40"],"/home/taleiko/Documents/Fullstack 2021/part5/src/services/blogs.js",["41"],"import axios from 'axios'\nconst baseUrl = '/api/blogs'\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nexport default { getAll, setToken, create }","/home/taleiko/Documents/Fullstack 2021/part5/src/services/login.js",["42"],"import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","/home/taleiko/Documents/Fullstack 2021/part5/src/components/BlogForm.js",[],"/home/taleiko/Documents/Fullstack 2021/part5/src/components/Togglable.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":15,"column":10,"nodeType":"49","messageId":"50","endLine":15,"endColumn":25},{"ruleId":"47","severity":1,"message":"51","line":15,"column":27,"nodeType":"49","messageId":"50","endLine":15,"endColumn":45},{"ruleId":"47","severity":1,"message":"52","line":11,"column":23,"nodeType":"49","messageId":"50","endLine":11,"endColumn":33},{"ruleId":"47","severity":1,"message":"53","line":13,"column":9,"nodeType":"49","messageId":"50","endLine":13,"endColumn":24},{"ruleId":"47","severity":1,"message":"54","line":14,"column":9,"nodeType":"49","messageId":"50","endLine":14,"endColumn":24},{"ruleId":"55","severity":1,"message":"56","line":23,"column":1,"nodeType":"57","endLine":23,"endColumn":44},{"ruleId":"55","severity":1,"message":"56","line":9,"column":1,"nodeType":"57","endLine":9,"endColumn":25},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'blogFormVisible' is assigned a value but never used.","Identifier","unusedVar","'setBlogFormVisible' is assigned a value but never used.","'setVisible' is assigned a value but never used.","'hideWhenVisible' is assigned a value but never used.","'showWhenVisible' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]